Scopes:-


What is Scope?
Scope in JavaScript refers to the context in which variables, functions, and objects are accessible or visible. It determines where in the code you can access or modify a variable.

In simple terms, scope defines:

==> Where variables are available.
==> How long they "live" in memory.

▶️ Global Scope:-

-> Variables declared outside of any function or block are in the global scope.

-> These variables can be accessed from anywhere in the program.

-> However, overusing global variables is not recommended because they can cause conflicts and make debugging harder.

example:- let globalVar = "I am global";

function showGlobalVar() {
  console.log(globalVar); // Accessible inside the function
}

showGlobalVar();
console.log(globalVar); // Accessible outside too

▶️ local scope:-

-> Variables declared inside a function or block are in the local scope

-> These variables are only accessible within that function or block

example:-
function greet() {
  let localVar = "Hello!";
  console.log(localVar); // Accessible inside the function
}

greet();
console.log(localVar); // Error: localVar is not defined

▶️ Block Scope:-

-> Variables declared with let or const inside a block ({}) are scoped to that block.

-> They cannot be accessed outside the block

example:-
{
  let blockScoped = "I exist only in this block";
  console.log(blockScoped); // Works here
}

console.log(blockScoped); // Error: blockScoped is not defined

Note: var does not have block scope; it is function-scoped instead.

▶️Function Scope

Variables declared with var are scoped to the function in which they are declared.

example:-

function testScope() {
  var functionScoped = "I exist only in this function";
  console.log(functionScoped); // Works here
}

testScope();
console.log(functionScoped); // Error: functionScoped is not defined

▶️ lexical scope:-

Lexical scope means that a function can access variables from the scope in which it was defined, not where it is called.

(means if the variable is declared in the outer function and we are calling that function inside the innerfunction it will print the variable value as the innerfunction will check it scope to print that variable if its not available it will go to its lexical scope(parent) to print the value of that variable if not in the parent it will go to its (grandparent) that is global scope to print the value)

function outerFunction() {
  let outerVariable = "I am from outer scope";

  function innerFunction() {
    console.log(outerVariable); // Can access outerVariable because of lexical scope
  }

  innerFunction(); // Calling innerFunction
}

outerFunction();