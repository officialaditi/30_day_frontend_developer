🛑  Data-type:-

--> Data or values have data types.
--> Data types describe the characteristics of data.
--> Data types can be divided into two:
         
         1)Primitive data types
         
         2)Non-primitive data types(Object References) 

💠 Primitive Data Types
Primitive data types in JavaScript include:

1) Numbers - Integers, floats
2) Strings - Any data under single quote, double quote or backtick quote
3) Booleans - true or false value
4) Null - empty value or no value
5) Undefined - a declared variable without a value
6) Symbol - A unique value that can be generated by Symbol constructor      

💠 Non-primitive data types in JavaScript includes:

1) Objects
2) Arrays

==> Difference between primitive and non-primitive ?

▶️ Primitive data types are immutable(non-modifiable) data types. Once a primitive data type is created we cannot modify it.

▶️ Non-primitive data types are modifiable or mutable. We can modify the value of non-primitive data types after it gets created


🔰  String:-

-> Strings are texts, which are under single , double, back-tick quote. 

-> To declare a string, we need a variable name, assignment operator, a value under a single quote, double quote, or backtick quote. Let's see some examples of strings:
let space = ' '           // an empty space string
let firstName = 'Asabeneh'
let lastName = 'Yetayeh'

❇️String Concatenation:-

Connecting two or more strings together is called concatenation. Using the strings declared in the previous String section:

let fullName = firstName + space + lastName; 
// concatenation, merging two string together.
console.log(fullName);

❇️ Escape Sequences in Strings
In JavaScript and other programming languages \ followed by some characters is an escape sequence. Let's see the most common escape characters:

\n: new line
\t: Tab, means 8 spaces
\\: Back slash
\': Single quote (')
\": Double quote (")

❇️ Template Literals (Template Strings)
To create a template strings, we use two back-ticks. We can inject data as expressions inside a template string. To inject data, we enclose the expression with a curly bracket({}) preceded by a $ sign. See the syntax below.

//Syntax
`${dynamical-variable we want}`

Example: 1
console.log(`The sum of 2 and 3 is 5`)   // statically writing the data
let a = 2
let b = 3
console.log(`The sum of ${a} and ${b} is ${a + b}`)

❇️ String Methods:-

-> Everything in JavaScript is an object. 
-> A string is a primitive data type that means we can not modify it once it is created. 
-> The string object has many string methods. There are different string methods that can help us to work with strings.

1) Length:-The string length method returns the number of characters in a string included empty space.
examples:- let js = 'JavaScript'
           console.log(js.length) 

     Note:- Accessing characters in a string: We can access each character in a string using its index. In programming, counting starts from 0. The first index of the string is zero, and the last index is the length of the string minus one.
     ==> let string = 'JavaScript'
         let firstLetter = string[0]
         console.log(firstLetter)        

2) toUpperCase(): this method changes the string to uppercase letters.
example:- let string = 'JavaScript'
          console.log(string.toUpperCase())   
           // JAVASCRIPT

3) toLowerCase(): this method changes the string to lowercase letters.           
example:- let string = 'JavasCript'
          console.log(string.toLowerCase())  
           // javascript

4) substr(): It takes two arguments, the starting index and number of characters to slice.        4----(6) => 6 letter slice
example:- let string = 'JavaScript'
          console.log(string.substr(4,6))  
            // Script   

5) substring(): It takes two arguments, the starting index and the stopping index but it doesn't include the character at the stopping index.
example:- let string = 'JavaScript'
          console.log(string.substring(0,4)) 
           // Java
          console.log(string.substring(4,10)) 
          // Script            

6) split(): The split method splits a string at a specified place.
example:- let string = '30 Days Of JavaScript'
          console.log(string.split())  
           // Changes to an array -> ["30 Days Of JavaScript"]
          console.log(string.split(' '))  
          // Split to an array at space -> ["30", "Days", "Of", "JavaScript"]          

7) trim(): Removes trailing space in the beginning or the end of a string.
example:- let string = '   30 Days Of JavaScript   '
          console.log(string)
          console.log(string.trim(' ')  ) 
          //    30 Days Of JavasCript   (without trim)
         //  30 Days Of JavasCript       

8) includes(): => It takes a substring argument and it checks if substring argument exists in the string. 
=>includes() returns a boolean.
=> If a substring exist in a string, it returns true, otherwise it returns false.
example:- let string = '30 Days Of JavaScript'
          console.log(string.includes('Days'))     
          // true
          console.log(string.includes('days'))     
          // false - it is case sensitive!  

9) replace(): takes as a parameter the old substring and a new substring.
syntax:- string.replace(oldsubstring, newsubstring)    
example:- let string = '30 Days Of JavaScript'
          console.log(string.replace('JavaScript', 'Python')) 
          // 30 Days Of Python             

10) charAt(): Takes index and it returns the value at that index
syntax:- string.charAt(index)
example:- let string = '30 Days Of JavaScript'
          console.log(string.charAt(0))  
          // 3
         let lastIndex = string.length - 1         
         console.log(string.charAt(lastIndex)) 
         // t          

11) indexOf(): Takes a substring and if the substring exists in a string it returns the first position of the substring if does not exist it returns -1
syntax:- string.indexOf(substring)
example:- let string = '30 Days Of JavaScript'
          console.log(string.indexOf('D'))         
           // 3
          console.log(string.indexOf('Days'))       
          // 3
          console.log(string.indexOf('days'))     
          // -1
          console.log(string.indexOf('a'))          
          // 4         

12) concat(): it takes many substrings and joins them.
syntax:- string.concat(substring, substring, substring)
example:- let string = '30'
          console.log(string.concat("Days", "Of", "JavaScript")) 
          // 30DaysOfJavaScript

13) startsWith: it takes a substring as an argument and it checks if the string starts with that specified substring. It returns a boolean(true or false).
syntax:- string.startsWith(substring)
example:- let string = 'Love is the best to in this world'
          console.log(string.startsWith('Love'))   
          // true
          console.log(string.startsWith('love'))   
          // false

14) endsWith: it takes a substring as an argument and it checks if the string ends with that specified substring. It returns a boolean(true or false).
syntax:- string.endsWith(substring)
example:- let string = 'Love is the most powerful feeling in the world'
          console.log(string.endsWith('world'))       
            // true
          console.log(string.endsWith('love'))   
           // false          

15) search: it takes a substring as an argument and it returns the index of the first match. The search value can be a string or a regular expression pattern.
syntax:- string.search(substring)
example:- let string = 'I love JavaScript. If you do not love JavaScript what else can you love.'
          console.log(string.search('love'))         
           // 2
          console.log(string.search(/javascript/gi)) 
           // 7           

16) match: => it takes a substring or regular expression pattern as an argument and it returns an array if there is match if not it returns null. 
=> Let us see how a regular expression pattern looks like.
=> It starts with / sign and ends with / sign.
example:- let string = 'love'
          let patternOne = /love/    
           // with out any flag
          let patternTwo = /love/gi  
           // g-means to search in the whole text, i - case insensitive           

17) repeat(): it takes a number as argument and it returns the repeated version of the string.
syntax:- string.repeat(n)
example:- let string = 'love' 
          console.log(string.repeat(10)) 
          // lovelovelovelovelovelovelovelovelovelove           
          
18) slice(start, end):- Extracts a portion of a string and returns a new string.
example:- let str = "Hello World";
          console.log(str.slice(0, 5)); 
          // "Hello"          